# Project MINI
Mobile 
Intelligent
Navigation 
Interface

## Overview
This project is for a maze solving mapping robot using a grid based movement systems 
and a occupancy grid mapping using IR sensors to traverse and map the maze while going through to improve it speed in returning through the maze 

## Files and Classes

### main.cpp
This is the main entry point of the project. It initializes the hardware and starts the main loop. is the place to call behaviours that the robot will follow such as maze mapping and mapTraversal


### Encoder Class
The Encoder class is responsible for handling the encoder that are on the robots motors. The encoders are used to measure the rotation of the motor, which is used to calculate the distance traveled by each of the robots wheels. The class provides methods to read an encoder count which is a variable which keeps track of how many encoder rises have happened on the encoder pin, reset the encoder count , and calculate the distance based on the encoder counts.

### IRSensor Class
The IRSensor class manages the infrared sensors used for detecting obstacles and walls in the maze. These sensors provide distance measurements (in milimetres) to objects in a 50mm straight line range, which are needed for navigation decisions and mapping onto the occupancy grid. The class includes methods to take a sensor reading and get back a distance reading in millimetres 

### MazeMapping Class
The MazeMapping class is a behaviour you set the robot on responsible for creating and updating the map of the maze as the robot explores it and will act based of this behaviour until its aim of reaching the end of the maze is achieved. It uses distance measurements taken from the four IR sensors to detect walls and obstacles, It uses these along with a robots current heading to decide on the next movement it should do in order to procced through the maze while keeping track of locations the robot has been and sensor readings in order to update the occupancy map with where is free space in the maze and where there are obstacles.

### MotorControl Class
The MotorControl class handles the low-level control of the robot's motors. It provides methods to set the PWM duty cycle (speed) and direction of each motor, stop the motors. it will also have an encoder associated with each motor to be used in the movement class

### MovementControl Class
The MovementControl class builds on the MotorControl class to provide higher-level movement commands such as moving forward and backwards by given millimetre distances and turning left and right on the spot by given degrees, also use the two front IR sensors to align with the maze wall infront if close enough in order to make sure the robot is inlines and moving parralle to the mazes walls and reduces errors caused by inaccuracies in the turns and driffting while moving forwards. This movement class is where most things are called through and inialize in as it will also be used to call set behaviours and tasks for the robot to act on such as traversing and mapping the maze and returning throught the maze using mapped information. 